/*
 * This file is generated by jOOQ.
*/
package com.apon.database.generated.tables;


import com.apon.database.generated.Indexes;
import com.apon.database.generated.Keys;
import com.apon.database.generated.Public;
import com.apon.database.generated.tables.records.StudentRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = -2060325644;

    /**
     * The reference instance of <code>PUBLIC.STUDENT</code>
     */
    public static final Student STUDENT = new Student();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>PUBLIC.STUDENT.STUDENTID</code>.
     */
    public final TableField<StudentRecord, Integer> STUDENTID = createField("STUDENTID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.EXTERNALIDENTIFIER</code>.
     */
    public final TableField<StudentRecord, String> EXTERNALIDENTIFIER = createField("EXTERNALIDENTIFIER", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.FIRSTNAME</code>.
     */
    public final TableField<StudentRecord, String> FIRSTNAME = createField("FIRSTNAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.INSERTION</code>.
     */
    public final TableField<StudentRecord, String> INSERTION = createField("INSERTION", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.LASTNAME</code>.
     */
    public final TableField<StudentRecord, String> LASTNAME = createField("LASTNAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.SEX</code>.
     */
    public final TableField<StudentRecord, String> SEX = createField("SEX", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.DATEOFBIRTH</code>.
     */
    public final TableField<StudentRecord, Date> DATEOFBIRTH = createField("DATEOFBIRTH", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.GROUPIDENTIFICATION</code>.
     */
    public final TableField<StudentRecord, String> GROUPIDENTIFICATION = createField("GROUPIDENTIFICATION", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.STUDENT.HASQUIT</code>.
     */
    public final TableField<StudentRecord, Boolean> HASQUIT = createField("HASQUIT", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.STUDENT</code> table reference
     */
    public Student() {
        this(DSL.name("STUDENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.STUDENT</code> table reference
     */
    public Student(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>PUBLIC.STUDENT</code> table reference
     */
    public Student(Name alias) {
        this(alias, STUDENT);
    }

    private Student(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Student(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_BA, Indexes.STUD_EXTID_INDEX_B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentRecord> getPrimaryKey() {
        return Keys.STUD_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentRecord>>asList(Keys.STUD_PK, Keys.STUD_EXTID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(String alias) {
        return new Student(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(Name alias) {
        return new Student(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(String name) {
        return new Student(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(Name name) {
        return new Student(name, null);
    }
}
