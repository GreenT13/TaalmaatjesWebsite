/*
 * This file is generated by jOOQ.
*/
package com.apon.database.generated.tables;


import com.apon.database.generated.Indexes;
import com.apon.database.generated.Keys;
import com.apon.database.generated.Taalmaatjes;
import com.apon.database.generated.tables.records.ScriptlogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scriptlog extends TableImpl<ScriptlogRecord> {

    private static final long serialVersionUID = -346875421;

    /**
     * The reference instance of <code>taalmaatjes.scriptlog</code>
     */
    public static final Scriptlog SCRIPTLOG = new Scriptlog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScriptlogRecord> getRecordType() {
        return ScriptlogRecord.class;
    }

    /**
     * The column <code>taalmaatjes.scriptlog.scriptName</code>.
     */
    public final TableField<ScriptlogRecord, String> SCRIPTNAME = createField("scriptName", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>taalmaatjes.scriptlog.tsStarted</code>.
     */
    public final TableField<ScriptlogRecord, Timestamp> TSSTARTED = createField("tsStarted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>taalmaatjes.scriptlog.tsFinished</code>.
     */
    public final TableField<ScriptlogRecord, Timestamp> TSFINISHED = createField("tsFinished", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>taalmaatjes.scriptlog.isCompleted</code>.
     */
    public final TableField<ScriptlogRecord, Boolean> ISCOMPLETED = createField("isCompleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>taalmaatjes.scriptlog</code> table reference
     */
    public Scriptlog() {
        this(DSL.name("scriptlog"), null);
    }

    /**
     * Create an aliased <code>taalmaatjes.scriptlog</code> table reference
     */
    public Scriptlog(String alias) {
        this(DSL.name(alias), SCRIPTLOG);
    }

    /**
     * Create an aliased <code>taalmaatjes.scriptlog</code> table reference
     */
    public Scriptlog(Name alias) {
        this(alias, SCRIPTLOG);
    }

    private Scriptlog(Name alias, Table<ScriptlogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scriptlog(Name alias, Table<ScriptlogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taalmaatjes.TAALMAATJES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCRIPTLOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ScriptlogRecord> getPrimaryKey() {
        return Keys.KEY_SCRIPTLOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ScriptlogRecord>> getKeys() {
        return Arrays.<UniqueKey<ScriptlogRecord>>asList(Keys.KEY_SCRIPTLOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scriptlog as(String alias) {
        return new Scriptlog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scriptlog as(Name alias) {
        return new Scriptlog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scriptlog rename(String name) {
        return new Scriptlog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scriptlog rename(Name name) {
        return new Scriptlog(name, null);
    }
}
